(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{613:function(t,s,v){"use strict";v.r(s);var _=v(25),a=Object(_.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"正则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[t._v("#")]),t._v(" 正则")]),t._v(" "),v("h2",{attrs:{id:"普通字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#普通字符"}},[t._v("#")]),t._v(" 普通字符")]),t._v(" "),v("p",[v("strong",[t._v("普通字符包括没有显式指定为"),v("u",[t._v("元字符")]),t._v("的所有可打印和不可打印字符。")])]),t._v(" "),v("ul",[v("li",[t._v("[ ABC ]  匹配[ ... ]中的所有字符")]),t._v(" "),v("li",[t._v("[^ABC]  匹配除了[ ... ]中字符的所有字符")]),t._v(" "),v("li",[t._v("[ A - Z ]  表示一个区间，匹配所有大写字母，[ a-z ]表示所有小写字母")]),t._v(" "),v("li",[t._v(".  匹配除换行符  \\n  \\r  之外的任何单个字符，相等于[ ^\\n\\r ]")]),t._v(" "),v("li",[t._v("\\s  匹配所有空白符，包括换行")]),t._v(" "),v("li",[t._v("\\S  匹配非空字符，不包括换行")]),t._v(" "),v("li",[t._v("[ \\s\\S ]  匹配所有")]),t._v(" "),v("li",[t._v("\\w  匹配字母、数字、下划线。等价于 [ A-Za-z0-9 ]")]),t._v(" "),v("li",[t._v("\\d  匹配数字")])]),t._v(" "),v("h2",{attrs:{id:"非打印字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非打印字符"}},[t._v("#")]),t._v(" 非打印字符")]),t._v(" "),v("p",[v("strong",[t._v("非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列")])]),t._v(" "),v("ul",[v("li",[t._v("\\cx  匹配由x指明的控制字符。例如，\\cM 匹配一个Control-M或回车符。x的值必须为 A-Za-z 之一")]),t._v(" "),v("li",[t._v("\\f  匹配一个换页符。等价于 \\x0c 和 \\cL")]),t._v(" "),v("li",[t._v("\\n  匹配一个换行符。等价于 \\x0a 和 \\cJ")]),t._v(" "),v("li",[t._v("\\r  匹配一个回车符。等价于 \\x0d 和 \\cM")]),t._v(" "),v("li",[t._v("\\s  匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v ]")]),t._v(" "),v("li",[t._v("\\S  匹配任何非空白字符。等价于 [ ^\\f\\n\\r\\t\\v ]")]),t._v(" "),v("li",[t._v("\\t  匹配一个制表符。等价于 \\x09 和 \\cI")]),t._v(" "),v("li",[t._v("\\v  匹配一个垂直制表符。等价于 \\x0b 和 \\cK")])]),t._v(" "),v("h2",{attrs:{id:"特殊字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),v("p",[v("strong",[t._v("一些有特殊含义的字符")])]),t._v(" "),v("ul",[v("li",[t._v("$  匹配输入字符串的结尾位置。如果设置了 RefExp 对象的Multiline属性，则 $ 也匹配 \\n 或 \\r")]),t._v(" "),v("li",[t._v("()  标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。")]),t._v(" "),v("li",[t._v("*****  匹配"),v("strong",[t._v("前面")]),t._v("的子表达式零次或多次。")]),t._v(" "),v("li",[t._v(".  匹配除换行符 \\n 之外的任何单字符。")]),t._v(" "),v("li",[t._v("[  标记一个中括号表达式的开始。")]),t._v(" "),v("li",[t._v("?  匹配前面的子表达式零次或一次，或指明一个非贪婪限定符")]),t._v(" "),v("li",[t._v("\\  将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。")]),t._v(" "),v("li",[t._v("^  匹配输入字符串的开始位置，除非在方括号表达式中使用，表示不接受该方括号表达式中的字符集合。")]),t._v(" "),v("li",[t._v("{  标记限定字符表达式的开始。")]),t._v(" "),v("li",[t._v("|  指明两项之间的一个选择。")])]),t._v(" "),v("h2",{attrs:{id:"限定符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#限定符"}},[t._v("#")]),t._v(" 限定符")]),t._v(" "),v("p",[v("strong",[t._v("用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配，有以下6种")])]),t._v(" "),v("ol",[v("li",[t._v("*****  匹配前面的子表达式零次或多次。等价于{0,}")]),t._v(" "),v("li",[v("strong",[t._v("+")]),t._v("  匹配前面的子表达式一次或多次。等价于{1,}")]),t._v(" "),v("li",[v("strong",[t._v("?")]),t._v("  匹配前面的子表达式零次或一次。等价于{0,1}")]),t._v(" "),v("li",[v("strong",[t._v("{n}")]),t._v("  n是一个非负整数。匹配确定的n次。")]),t._v(" "),v("li",[v("strong",[t._v("{n,}")]),t._v("  至少匹配 n 次。")]),t._v(" "),v("li",[v("strong",[t._v("{n, m}")]),t._v("  n和m均为非负整数，其中n <= m，最少匹配n次且最多匹配m次。")])]),t._v(" "),v("ul",[v("li",[t._v("***** 和**+** 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个**?** 就可以实现非贪婪或最小匹配。")])]),t._v(" "),v("h2",{attrs:{id:"定位符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定位符"}},[t._v("#")]),t._v(" 定位符")]),t._v(" "),v("p",[v("strong",[t._v("可以将正则表达式固定到行首或行尾，可以用来描述字符串或单词的边界")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("^")]),t._v("  匹配输入字符串开始位置；（如果设置了RefExp对象的Multiline属性，^ 还会与\\n 或\\r 之"),v("strong",[t._v("后")]),t._v("的位置匹配）")]),t._v(" "),v("li",[v("strong",[t._v("$")]),t._v("  匹配输入字符串结尾位置；（如果设置了RefExp对象的Multiline属性，$ 还会与\\n 或\\r 之"),v("strong",[t._v("前")]),t._v("的位置匹配）")]),t._v(" "),v("li",[t._v("\\b  匹配一个单词边界，即字与空格间的位置（注意前后边界位置）。")]),t._v(" "),v("li",[t._v("\\B  非单词边界匹配。")])]),t._v(" "),v("h2",{attrs:{id:"选择"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#选择"}},[t._v("#")]),t._v(" 选择")]),t._v(" "),v("p",[v("strong",[t._v("用圆括号（）将所有选择项括起来，相邻的选择项之间用 | 分割。（）表示捕获分组，（）会把每个分组里的匹配的值保存起来，多个匹配值可以通过数组n来查看（n是一个数字，表示第n个捕获组的内容）")])]),t._v(" "),v("p",[v("strong",[t._v("以下列出 ?=、?<=、?!、?<! 的使用区别")])]),t._v(" "),v("ul",[v("li",[t._v("exp1(?=exp2)  查找exp1后面是exp2的字符串")]),t._v(" "),v("li",[t._v("(?<=exp2)exp1  查找exp1前面是exp2的字符串")]),t._v(" "),v("li",[t._v("exp1(?!exp2)  查找exp1后面不是exp2的字符串")]),t._v(" "),v("li",[t._v("(?<!exp2)exp1  查找exp1前面不是exp2的字符串")])]),t._v(" "),v("h2",{attrs:{id:"反向引用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反向引用"}},[t._v("#")]),t._v(" 反向引用")]),t._v(" "),v("p",[v("strong",[t._v("对一个正则表达式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右的顺序存储。缓冲区编号从1开始，最多可存储99个捕获的子表达式。每个缓冲区都可以使用\\n访问（n为一个标识特定缓冲区的一位或两位十进制数）")])]),t._v(" "),v("blockquote",[v("p",[t._v("找出"),v("em",[t._v("连续")]),t._v("重复单词的例子")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Is is the cost of of gasoline going up up"')]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" patt "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token regex"}},[v("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),v("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b([a-z]+) \\1\\b")]),v("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),v("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正则表达式的第二部分是对以前捕获的子匹配项的引用；（/Is\\b/ig、/is\\b/ig...）")]),t._v("\n\ndocument"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("patt"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["Is is", "of of", "up up"]')]),t._v("\n")])])])])])}),[],!1,null,null,null);s.default=a.exports}}]);